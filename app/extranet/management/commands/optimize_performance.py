"""
Commande Django pour optimiser les performances du syst√®me.
Usage: python manage.py optimize_performance [options]
"""

from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from django.core.cache import cache
from django.db import connection
from datetime import date
import time


class Command(BaseCommand):
    help = 'Optimise les performances du syst√®me : cache, base de donn√©es, statistiques'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--warm-cache',
            action='store_true',
            help='Pr√©chauffe le cache avec les donn√©es critiques',
        )
        parser.add_argument(
            '--clear-cache',
            action='store_true',
            help='Vide compl√®tement le cache',
        )
        parser.add_argument(
            '--update-stats',
            action='store_true',
            help='Met √† jour les statistiques mensuelles de tous les utilisateurs',
        )
        parser.add_argument(
            '--analyze-db',
            action='store_true',
            help='Analyse les performances de la base de donn√©es',
        )
        parser.add_argument(
            '--all',
            action='store_true',
            help='Ex√©cute toutes les optimisations',
        )
        parser.add_argument(
            '--users',
            type=str,
            help='Liste des usernames s√©par√©s par des virgules (ex: user1,user2)',
        )

    def handle(self, *args, **options):
        start_time = time.time()
        
        self.stdout.write('üöÄ Optimisation des performances en cours...\n')
        
        if options['all']:
            options['clear_cache'] = True
            options['warm_cache'] = True
            options['update_stats'] = True
            options['analyze_db'] = True
        
        # Filtrer les utilisateurs si sp√©cifi√©
        users = User.objects.filter(is_active=True).select_related('profile')
        if options['users']:
            usernames = options['users'].split(',')
            users = users.filter(username__in=usernames)
            self.stdout.write(f'üéØ Utilisateurs s√©lectionn√©s: {usernames}')
        
        # 1. Nettoyage du cache
        if options['clear_cache']:
            self.clear_cache()
        
        # 2. Analyse de la base de donn√©es
        if options['analyze_db']:
            self.analyze_database()
        
        # 3. Mise √† jour des statistiques
        if options['update_stats']:
            self.update_statistics(users)
        
        # 4. R√©chauffement du cache
        if options['warm_cache']:
            self.warm_cache(users)
        
        duration = time.time() - start_time
        self.stdout.write(
            self.style.SUCCESS(
                f'‚úÖ Optimisation termin√©e en {duration:.2f}s'
            )
        )

    def clear_cache(self):
        """Vide le cache Redis"""
        self.stdout.write('üóëÔ∏è  Nettoyage du cache...')
        try:
            cache.clear()
            self.stdout.write(self.style.SUCCESS('‚úÖ Cache vid√©'))
        except Exception as e:
            self.stdout.write(self.style.WARNING(f'‚ö†Ô∏è  Cache non disponible: {e}'))

    def warm_cache(self, users):
        """Pr√©chauffe le cache avec les donn√©es critiques"""
        self.stdout.write(f'üî• Pr√©chauffage du cache pour {users.count()} utilisateurs...')
        
        try:
            from extranet.utils import warm_up_cache
            warm_up_cache()
            self.stdout.write(self.style.SUCCESS('‚úÖ Cache pr√©chauff√©'))
        except Exception as e:
            self.stdout.write(self.style.WARNING(f'‚ö†Ô∏è  Erreur lors du pr√©chauffage: {e}'))

    def update_statistics(self, users):
        """Met √† jour les statistiques mensuelles"""
        self.stdout.write(f'üìä Mise √† jour des statistiques pour {users.count()} utilisateurs...')
        
        try:
            from extranet.models import MonthlyUserStats
            from extranet.utils import batch_update_user_stats
            
            current_date = date.today()
            
            # Mettre √† jour le mois courant et le pr√©c√©dent
            for month_offset in [0, -1]:
                target_date = current_date.replace(day=1)
                if month_offset == -1:
                    if target_date.month == 1:
                        target_date = target_date.replace(year=target_date.year - 1, month=12)
                    else:
                        target_date = target_date.replace(month=target_date.month - 1)
                
                batch_update_user_stats(users, target_date.year, target_date.month)
                self.stdout.write(f'   ‚úì Mois {target_date.year}-{target_date.month:02d} mis √† jour')
            
            self.stdout.write(self.style.SUCCESS('‚úÖ Statistiques mises √† jour'))
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Erreur lors de la mise √† jour: {e}'))

    def analyze_database(self):
        """Analyse les performances de la base de donn√©es"""
        self.stdout.write('üîç Analyse de la base de donn√©es...')
        
        try:
            with connection.cursor() as cursor:
                # Statistiques des tables principales
                tables = [
                    'extranet_leaverequest',
                    'extranet_teleworkrequest', 
                    'extranet_overtimerequest',
                    'extranet_userleavebalance',
                    'extranet_monthlyuserstats',
                    'auth_user'
                ]
                
                self.stdout.write('\nüìã Statistiques des tables:')
                for table in tables:
                    try:
                        cursor.execute(f"SELECT COUNT(*) FROM {table}")
                        count = cursor.fetchone()[0]
                        self.stdout.write(f'   {table}: {count:,} enregistrements')
                    except Exception as e:
                        self.stdout.write(f'   {table}: Erreur - {e}')
                
                # Index manquants potentiels
                self.stdout.write('\nüîç V√©rification des index:')
                self.check_missing_indexes(cursor)
                
                # Requ√™tes lentes potentielles
                self.stdout.write('\n‚ö†Ô∏è  Suggestions d\'optimisation:')
                self.suggest_optimizations()
                
            self.stdout.write(self.style.SUCCESS('‚úÖ Analyse termin√©e'))
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Erreur lors de l\'analyse: {e}'))

    def check_missing_indexes(self, cursor):
        """V√©rifie les index manquants"""
        # V√©rifications sp√©cifiques PostgreSQL
        try:
            # Index sur les colonnes de filtrage fr√©quent
            important_indexes = [
                ('extranet_leaverequest', 'user_id', 'status'),
                ('extranet_leaverequest', 'start_date', 'end_date'),
                ('extranet_teleworkrequest', 'user_id', 'status'),
                ('extranet_overtimerequest', 'user_id', 'status'),
                ('extranet_userleavebalance', 'user_id', 'period_start'),
                ('extranet_monthlyuserstats', 'user_id', 'year', 'month'),
            ]
            
            for table, *columns in important_indexes:
                index_name = f"idx_{table}_{'_'.join(columns)}"
                cursor.execute("""
                    SELECT 1 FROM pg_indexes 
                    WHERE tablename = %s AND indexname = %s
                """, [table, index_name])
                
                if cursor.fetchone():
                    self.stdout.write(f'   ‚úì Index {index_name} pr√©sent')
                else:
                    self.stdout.write(f'   ‚ö†Ô∏è  Index {index_name} manquant')
                    
        except Exception as e:
            self.stdout.write(f'   ‚ùå Erreur v√©rification index: {e}')

    def suggest_optimizations(self):
        """Sugg√®re des optimisations"""
        suggestions = [
            "Utiliser select_related() pour les requ√™tes avec jointures",
            "Utiliser prefetch_related() pour les relationsMany-to-Many",
            "Mettre en cache les calculs de soldes de cong√©s",
            "Paginer les grandes listes de demandes",
            "Optimiser les requ√™tes de tableau de bord",
            "Utiliser des index composites pour les filtres multiples",
        ]
        
        for i, suggestion in enumerate(suggestions, 1):
            self.stdout.write(f'   {i}. {suggestion}')

    def show_cache_stats(self):
        """Affiche les statistiques du cache"""
        try:
            # Tentative de r√©cup√©ration des stats Redis
            self.stdout.write('\nüìä Statistiques du cache:')
            
            # Test de connectivit√©
            cache.set('test_key', 'test_value', 10)
            if cache.get('test_key') == 'test_value':
                self.stdout.write('   ‚úì Cache Redis op√©rationnel')
                cache.delete('test_key')
            else:
                self.stdout.write('   ‚ùå Cache Redis non accessible')
            
        except Exception as e:
            self.stdout.write(f'   ‚ùå Erreur cache: {e}')
