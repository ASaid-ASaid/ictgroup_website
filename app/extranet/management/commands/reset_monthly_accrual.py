"""
Command pour annuler/r√©initialiser l'accrual mensuel automatique.
Utile pour corriger les doubles ex√©cutions ou tests.
"""
from django.core.management.base import BaseCommand
from django.utils import timezone
from django.contrib.auth.models import User
from datetime import datetime, date
from decimal import Decimal
from django.core.cache import cache
from extranet.models import UserProfile, UserLeaveBalance


class Command(BaseCommand):
    help = 'Annule/r√©initialise l\'accrual mensuel automatique'

    def add_arguments(self, parser):
        parser.add_argument(
            '--month',
            type=int,
            help='Mois sp√©cifique (1-12). Par d√©faut: mois courant',
        )
        parser.add_argument(
            '--year',
            type=int,
            help='Ann√©e sp√©cifique. Par d√©faut: ann√©e courante',
        )
        parser.add_argument(
            '--subtract-only',
            action='store_true',
            help='Seulement soustraire les jours ajout√©s en double',
        )
        parser.add_argument(
            '--clear-cache',
            action='store_true',
            help='Effacer le cache pour permettre un nouvel accrual',
        )

    def handle(self, *args, **options):
        # D√©terminer la p√©riode
        now = timezone.now()
        target_month = options.get('month') or now.month
        target_year = options.get('year') or now.year
        
        self.stdout.write(
            self.style.SUCCESS(
                f"üîß R√©initialisation accrual pour {target_month:02d}/{target_year}"
            )
        )
        
        # Effacer le cache si demand√©
        if options['clear_cache']:
            cache_key = f"monthly_accrual_{target_year}_{target_month:02d}"
            cache.delete(cache_key)
            self.stdout.write(
                self.style.SUCCESS("‚úÖ Cache accrual effac√©")
            )
        
        # Compteurs
        processed = 0
        updated = 0
        errors = 0
        
        # R√©cup√©rer tous les utilisateurs actifs avec profil
        users = User.objects.filter(
            is_active=True,
            profile__isnull=False
        ).select_related('profile')
        
        for user in users:
            try:
                profile = user.profile
                
                # D√©terminer les jours √† soustraire selon le site
                if profile.site.lower() in ['fr', 'france']:
                    monthly_days = Decimal('2.5')
                elif profile.site.lower() in ['tn', 'tunisie']:
                    monthly_days = Decimal('1.8')
                else:
                    continue
                
                # P√©riode fiscale
                if target_month >= 6:
                    period_start = date(target_year, 6, 1)
                else:
                    period_start = date(target_year - 1, 6, 1)
                
                try:
                    balance = UserLeaveBalance.objects.get(
                        user=user,
                        period_start=period_start
                    )
                    
                    if options['subtract_only']:
                        # Soustraire les jours ajout√©s en double
                        if balance.days_acquired >= monthly_days:
                            balance.days_acquired -= monthly_days
                            balance.save()
                            updated += 1
                            self.stdout.write(
                                f"‚úÖ {user.username}: -{monthly_days} jours "
                                f"(nouveau total: {balance.days_acquired})"
                            )
                        else:
                            self.stdout.write(
                                f"‚ö†Ô∏è  {user.username}: solde insuffisant pour soustraire "
                                f"{monthly_days} (actuel: {balance.days_acquired})"
                            )
                    else:
                        # R√©initialiser compl√®tement
                        old_acquired = balance.days_acquired
                        balance.days_acquired = Decimal('0')
                        balance.save()
                        updated += 1
                        self.stdout.write(
                            f"üîÑ {user.username}: remis √† z√©ro "
                            f"(ancien: {old_acquired}, nouveau: 0)"
                        )
                    
                except UserLeaveBalance.DoesNotExist:
                    self.stdout.write(
                        f"‚ÑπÔ∏è  {user.username}: aucun solde trouv√© pour cette p√©riode"
                    )
                
                processed += 1
                
            except Exception as e:
                errors += 1
                self.stdout.write(
                    self.style.ERROR(
                        f"‚ùå Erreur pour {user.username}: {str(e)}"
                    )
                )
        
        # R√©sum√© final
        action = "Soustraction" if options['subtract_only'] else "R√©initialisation"
        self.stdout.write(
            self.style.SUCCESS(
                f"\nüìä R√©sum√© {action}:\n"
                f"   ‚Ä¢ Utilisateurs trait√©s: {processed}\n"
                f"   ‚Ä¢ Soldes modifi√©s: {updated}\n"
                f"   ‚Ä¢ Erreurs: {errors}\n"
            )
        )
