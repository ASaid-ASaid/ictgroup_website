"""
Signaux Django pour la mise √† jour automatique des soldes et statistiques.
Se d√©clenche lors de la cr√©ation, modification ou suppression des demandes.
"""

import logging
from datetime import date
from decimal import Decimal

from django.db.models.signals import post_delete, post_save
from django.contrib.auth.signals import user_logged_in
from django.dispatch import receiver
from django.contrib.auth.models import User
from django.core.cache import cache

from .models import LeaveRequest, TeleworkRequest, OverTimeRequest, UserLeaveBalance, MonthlyUserStats

logger = logging.getLogger(__name__)


@receiver(post_save, sender=LeaveRequest)
def update_leave_balances_on_save(sender, instance, **kwargs):
    """
    Met √† jour les soldes de cong√©s et statistiques mensuelles
    quand une demande de cong√© est cr√©√©e ou modifi√©e.
    """
    try:
        # Mettre √† jour le solde de cong√©s de l'utilisateur
        today = date.today()
        
        # D√©terminer la p√©riode de cong√©s
        if today.month >= 6:  # juin √† d√©cembre
            period_start = date(today.year, 6, 1)
        else:  # janvier √† mai
            period_start = date(today.year - 1, 6, 1)
        
        try:
            balance = UserLeaveBalance.objects.get(
                user=instance.user,
                period_start=period_start
            )
            balance.update_taken_days()
        except UserLeaveBalance.DoesNotExist:
            logger.warning(f"Aucun solde trouv√© pour {instance.user.username} p√©riode {period_start}")

        # Mettre √† jour les statistiques mensuelles pour les mois concern√©s
        start_month = instance.start_date.month
        start_year = instance.start_date.year
        end_month = instance.end_date.month
        end_year = instance.end_date.year

        # Mettre √† jour tous les mois entre start et end
        current_month = start_month
        current_year = start_year

        while (current_year < end_year) or (
            current_year == end_year and current_month <= end_month
        ):
            stats, created = MonthlyUserStats.objects.get_or_create(
                user=instance.user,
                year=current_year,
                month=current_month
            )
            stats.update_from_requests()

            current_month += 1
            if current_month > 12:
                current_month = 1
                current_year += 1

        logger.info(
            f"Soldes et statistiques mis √† jour pour {instance.user.username} suite √† modification cong√© {instance.id}"
        )

    except Exception as e:
        logger.error(f"Erreur mise √† jour soldes/statistiques cong√©: {e}")


@receiver(post_delete, sender=LeaveRequest)
def update_leave_balances_on_delete(sender, instance, **kwargs):
    """
    Met √† jour les soldes et statistiques quand une demande de cong√© est supprim√©e.
    """
    try:
        # Mettre √† jour le solde de cong√©s de l'utilisateur
        today = date.today()
        
        # D√©terminer la p√©riode de cong√©s
        if today.month >= 6:  # juin √† d√©cembre
            period_start = date(today.year, 6, 1)
        else:  # janvier √† mai
            period_start = date(today.year - 1, 6, 1)
        
        try:
            balance = UserLeaveBalance.objects.get(
                user=instance.user,
                period_start=period_start
            )
            balance.update_taken_days()
        except UserLeaveBalance.DoesNotExist:
            logger.warning(f"Aucun solde trouv√© pour {instance.user.username} p√©riode {period_start}")

        # Mettre √† jour les statistiques mensuelles
        start_month = instance.start_date.month
        start_year = instance.start_date.year
        end_month = instance.end_date.month
        end_year = instance.end_date.year

        current_month = start_month
        current_year = start_year

        while (current_year < end_year) or (
            current_year == end_year and current_month <= end_month
        ):
            try:
                stats = MonthlyUserStats.objects.get(
                    user=instance.user,
                    year=current_year,
                    month=current_month
                )
                stats.update_from_requests()
            except MonthlyUserStats.DoesNotExist:
                pass

            current_month += 1
            if current_month > 12:
                current_month = 1
                current_year += 1

        logger.info(
            f"Soldes et statistiques mis √† jour pour {instance.user.username} suite √† suppression cong√© {instance.id}"
        )

    except Exception as e:
        logger.error(f"Erreur mise √† jour soldes/statistiques suppression cong√©: {e}")


@receiver(post_save, sender=TeleworkRequest)
def update_stats_on_telework_save(sender, instance, **kwargs):
    """
    Met √† jour les statistiques mensuelles quand une demande de t√©l√©travail est cr√©√©e ou modifi√©e.
    """
    try:
        # Mettre √† jour les statistiques mensuelles pour les mois concern√©s
        start_month = instance.start_date.month
        start_year = instance.start_date.year
        end_month = instance.end_date.month
        end_year = instance.end_date.year

        current_month = start_month
        current_year = start_year

        while (current_year < end_year) or (
            current_year == end_year and current_month <= end_month
        ):
            stats, created = MonthlyUserStats.objects.get_or_create(
                user=instance.user,
                year=current_year,
                month=current_month
            )
            stats.update_from_requests()

            current_month += 1
            if current_month > 12:
                current_month = 1
                current_year += 1

        logger.info(
            f"Statistiques mises √† jour pour {instance.user.username} suite √† modification t√©l√©travail {instance.id}"
        )

    except Exception as e:
        logger.error(f"Erreur mise √† jour statistiques t√©l√©travail: {e}")


@receiver(post_delete, sender=TeleworkRequest)
def update_stats_on_telework_delete(sender, instance, **kwargs):
    """
    Met √† jour les statistiques quand une demande de t√©l√©travail est supprim√©e.
    """
    try:
        # Mettre √† jour les statistiques mensuelles
        start_month = instance.start_date.month
        start_year = instance.start_date.year
        end_month = instance.end_date.month
        end_year = instance.end_date.year

        current_month = start_month
        current_year = start_year

        while (current_year < end_year) or (
            current_year == end_year and current_month <= end_month
        ):
            try:
                stats = MonthlyUserStats.objects.get(
                    user=instance.user,
                    year=current_year,
                    month=current_month
                )
                stats.update_from_requests()
            except MonthlyUserStats.DoesNotExist:
                pass

            current_month += 1
            if current_month > 12:
                current_month = 1
                current_year += 1

        logger.info(
            f"Statistiques mises √† jour pour {instance.user.username} suite √† suppression t√©l√©travail {instance.id}"
        )

    except Exception as e:
        logger.error(f"Erreur mise √† jour statistiques suppression t√©l√©travail: {e}")


@receiver(post_save, sender=OverTimeRequest)
def update_stats_on_overtime_save(sender, instance, **kwargs):
    """
    Met √† jour les statistiques mensuelles quand une demande d'heures suppl√©mentaires est cr√©√©e ou modifi√©e.
    """
    try:
        # Mettre √† jour les statistiques mensuelles pour le mois de la demande
        stats, created = MonthlyUserStats.objects.get_or_create(
            user=instance.user,
            year=instance.work_date.year,
            month=instance.work_date.month
        )
        stats.update_from_requests()

        logger.info(
            f"Statistiques mises √† jour pour {instance.user.username} suite √† modification heures suppl√©mentaires {instance.id}"
        )

    except Exception as e:
        logger.error(f"Erreur mise √† jour statistiques heures suppl√©mentaires: {e}")


@receiver(post_delete, sender=OverTimeRequest)
def update_stats_on_overtime_delete(sender, instance, **kwargs):
    """
    Met √† jour les statistiques quand une demande d'heures suppl√©mentaires est supprim√©e.
    """
    try:
        # Mettre √† jour les statistiques mensuelles
        try:
            stats = MonthlyUserStats.objects.get(
                user=instance.user,
                year=instance.work_date.year,
                month=instance.work_date.month
            )
            stats.update_from_requests()
        except MonthlyUserStats.DoesNotExist:
            pass

        logger.info(
            f"Statistiques mises √† jour pour {instance.user.username} suite √† suppression heures suppl√©mentaires {instance.id}"
        )

    except Exception as e:
        logger.error(f"Erreur mise √† jour statistiques suppression heures suppl√©mentaires: {e}")


@receiver(user_logged_in)
def auto_monthly_leave_accrual_on_login(sender, request, user, **kwargs):
    """
    Lance automatiquement l'accrual mensuel de cong√©s √† la premi√®re connexion du mois.
    Utilise le cache pour √©viter les ex√©cutions multiples.
    """
    try:
        today = date.today()
        cache_key = f"monthly_accrual_{today.year}_{today.month:02d}"
        
        # V√©rifier si l'accrual de ce mois a d√©j√† √©t√© fait
        if cache.get(cache_key):
            logger.debug(f"Accrual d√©j√† fait ce mois {today.month}/{today.year} - Connexion ignor√©e")
            return
        
        logger.info(f"üöÄ Premi√®re connexion du mois {today.month}/{today.year} - Lancement accrual automatique")
        
        # Marquer imm√©diatement pour √©viter les ex√©cutions simultan√©es
        cache.set(cache_key, True, timeout=30*24*3600)  # 30 jours
        
        # R√©cup√©rer tous les utilisateurs actifs avec profil
        users = User.objects.filter(
            is_active=True,
            profile__isnull=False
        ).select_related('profile')
        
        updated_count = 0
        
        for user_obj in users:
            try:
                profile = user_obj.profile
                
                # D√©terminer les jours √† ajouter selon le site
                site_lower = profile.site.lower() if profile.site else ''
                if site_lower in ['fr', 'france']:
                    monthly_days = Decimal('2.5')
                elif site_lower in ['tn', 'tunisie']:
                    monthly_days = Decimal('1.8')
                else:
                    continue
                
                # P√©riode fiscale du 1er juin au 31 mai
                if today.month >= 6:
                    period_start = date(today.year, 6, 1)
                else:
                    period_start = date(today.year - 1, 6, 1)
                
                period_end = date(period_start.year + 1, 5, 31)
                
                # R√©cup√©rer ou cr√©er le solde de cong√©s pour la p√©riode courante
                balance, created = UserLeaveBalance.objects.get_or_create(
                    user=user_obj,
                    period_start=period_start,
                    defaults={
                        'days_acquired': Decimal('0'),
                        'days_taken': Decimal('0'),
                        'days_carry_over': Decimal('0'),
                        'period_end': period_end,
                    }
                )
                
                # Ajouter les jours mensuels
                balance.days_acquired += monthly_days
                balance.save()
                
                updated_count += 1
                logger.info(f"‚úÖ Accrual automatique: {user_obj.username} ({profile.site}) +{monthly_days} jours")
                
            except Exception as e:
                logger.error(f"‚ùå Erreur accrual automatique pour {user_obj.username}: {str(e)}")
        
        logger.info(f"üìä Accrual automatique termin√©: {updated_count} utilisateurs mis √† jour")
        
    except Exception as e:
        logger.error(f"Erreur dans l'accrual automatique √† la connexion: {e}")
